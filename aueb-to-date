#!/usr/bin/env python3
"""
Python script that fetches my uni's semester schedule.
Copyright (C) 2024 Peter Frangatzis

This program is free software: you can redistribute it and/or modify it
under the terms of the GNU General Public License as published by the Free
Software Foundation, either version 3 of the License, or (at your option)
any later version.

This program is distributed in the hope that it will be useful, but WITHOUT
ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for
more details.

You should have received a copy of the GNU General Public License along with
this program. If not, see <https://www.gnu.org/licenses/>.
"""

from bs4 import BeautifulSoup
from datetime import datetime
import requests
import sys


def show_usage() -> None:
    print('usage: aueb-to-date [filename]', file=sys.stderr)


def make_request(uri: str) -> requests.Response:
    r = requests.get(uri)
    if r.status_code != 200:
        print(f'Request for {uri} failed.\nStatus code: {r.status_code}',
              file=sys.stderr)
        return None
    return r


def strip_fname(uri: str) -> str:
    return uri.split('/')[-1]


def compute_url() -> str:
    now = datetime.now()
    prefix = 'https://www.aueb.gr/el/content/orologio-programma-didaskalias'
    semester = 'earinoy' if now.month in range(3, 10) else 'heimerinoy'
    ac_year = None

    if now.month in range(1, 10):
        ac_year = str(now.year - 1) + '-' + str(now.year)
    else:
        ac_year = str(now.year) + '-' + str(now.year + 1)

    return f'{prefix}-{semester}-examinoy-{ac_year}'


def main() -> None:
    if len(sys.argv) > 2:
        show_usage()
        exit()

    url = compute_url()
    print(f'Requesting {url}... ', end='')
    req = make_request(url)
    if req is None:
        exit(1)
    print('OK.')

    soup = BeautifulSoup(req.text, 'html.parser')
    doc_spans = soup.find_all('span', attrs={'class': 'file'})

    # The first span always contains the lastest schedule in pdf format.
    latest = doc_spans[0]

    # Each 'file' span contains one 'img' tag and one 'a' tag. The 'a' tag
    # contains the the link to the pdf file we want.
    href = latest.find_next('a').attrs.get('href')

    print(f'Requesting {href}... ', end='')
    req = make_request(href)
    if req is None:
        exit(1)
    print('OK.')

    filename = sys.argv[1] if len(sys.argv) == 2 else href.split('/')[-1]
    print(f'Saving file to \'{filename}\'... ', end='')
    with open(filename, 'wb') as f:
        f.write(req.content)
        # TODO ^ check if we're about to overwrite something
    print('OK.')

if __name__ == '__main__':
    main()
